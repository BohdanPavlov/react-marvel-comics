{"version":3,"file":"static/js/288.5b692fa7.chunk.js","mappings":"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","sources":["components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charList/CharList.js","components/errorBoundary/ErrorBoundary.js","components/randomChar/RandomChar.js","components/pages/MainPage.js"],"sourcesContent":["import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import {useEffect, useState} from \"react\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\nimport Spinner from \"../spinner/Spinner\";\n\nimport './charInfo.scss';\n\nconst CharInfo = ({charId}) => {\n    const [char, setChar] = useState(null)\n\n    const {loading, error, getCharacter, clearError} = useMarvelService()\n\n    useEffect(() => {\n        updateChar()\n    }, [charId])\n\n    const updateChar = () => {\n        if (!charId) return\n\n        clearError()\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>\n    const spinner = loading ? <Spinner/> : null\n    const errorMessage = error ? <ErrorMessage/> : null\n    const content = !(loading || error) && char ? <View char={char}/> : null\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {spinner}\n            {errorMessage}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    function mapComics(comics) {\n        const comicsList = comics.map((item, i) => {\n            return (\n                <li className=\"char__comics-item\" key={i}>\n                    {item.name}\n                </li>\n            )\n        })\n\n        if (comicsList.length > 10) {\n            return comicsList.slice(0, 10)\n        }\n\n        if (comicsList.length === 0) {\n            return 'No comics with this character :('\n        }\n\n        return comicsList\n    }\n\n    const {name, description, thumbnail, homepage, wiki, comics} = char\n    const comicsList = mapComics(comics)\n    const imgStyle = thumbnail.includes('image_not_available') ? {'objectFit': 'contain'} : null\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comicsList}\n            </ul>\n        </>\n    )\n}\n\nexport default CharInfo;\n","import PropTypes from \"prop-types\";\nimport {useEffect, useRef, useState} from \"react\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\n\nimport './charList.scss';\n\nconst CharList = ({onSelectChar}) => {\n    const [characters, setCharacters] = useState([])\n    const [newCharactersLoading, setNewCharactersLoading] = useState(false)\n    const [offset, setOffset] = useState(1531)\n    const [charEnded, setCharEnded] = useState(false)\n\n    const {loading, error, getAllCharacters} = useMarvelService()\n\n    useEffect(() => {\n        getCharacters(offset, true)\n    }, [])\n\n    const getCharacters = (offset, initial) => {\n        initial ? setNewCharactersLoading(false) : setNewCharactersLoading(true)\n\n        getAllCharacters(offset)\n            .then(onCharactersLoaded)\n    }\n\n    const onCharactersLoaded = (newCharacters) => {\n        let ended = false\n        if (newCharacters.length < 9) {\n            ended = true\n        }\n\n        setCharacters(characters => [...characters, ...newCharacters])\n        setNewCharactersLoading(false)\n        setOffset(offset => offset + 9)\n        setCharEnded(ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (i) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[i].classList.add('char__item_selected');\n        itemRefs.current[i].focus();\n    }\n\n    const onSelectedChar = (id, index) => {\n        onSelectChar(id)\n        focusOnItem(index)\n    }\n\n    const renderItems = (characters) => {\n        const items = characters.map((char, i) => {\n            let imgStyle = {'objectFit': 'cover'};\n            if (char.thumbnail.includes('image_not_available')) {\n                imgStyle = {'objectFit': 'unset'};\n            }\n\n            return (\n                <li\n                    ref={(el) => itemRefs.current[i] = el}\n                    className=\"char__item\"\n                    key={char.id}\n                    onClick={() => onSelectedChar(char.id, i)}\n                >\n                    <img src={char.thumbnail} alt={char.name} style={imgStyle}/>\n                    <div className=\"char__name\">{char.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(characters);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newCharactersLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                onClick={() => getCharacters(offset)}\n                disabled={newCharactersLoading}\n                style={{display: charEnded ? 'none' : 'block'}}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onSelectChar: PropTypes.func.isRequired\n}\n\nexport default CharList;\n","import {Component} from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({error: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import {useEffect, useState} from \"react\";\n\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport './randomChar.scss';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({})\n\n    const {loading, error, getCharacter, clearError} = useMarvelService()\n\n    useEffect(() => {\n        updateChar()\n    }, [])\n\n    const updateChar = () => {\n        clearError()\n        const randomId = Math.floor(Math.random() * (1009754 - 1009146) + 1009146)\n        getCharacter(randomId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null\n    const spinner = loading ? <Spinner/> : null\n    const content = !(loading || error) ? <View char={char}/> : null\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button\n                    className=\"button button__main\"\n                    onClick={updateChar}\n                >\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char\n\n    return (\n        <div className=\"randomchar__block\">\n            <img\n                src={thumbnail}\n                alt=\"Random character\"\n                className=\"randomchar__img\"\n                style={thumbnail?.includes('image_not_available') ? {objectFit: 'contain'} : null}\n            />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;\n","import React, {useState} from 'react';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport CharList from '../charList/CharList';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\nimport RandomChar from '../randomChar/RandomChar';\r\n\r\nconst MainPage = () => {\r\n    const [selectedCharId, setSelectedCharId] = useState(null)\r\n\r\n    const onSelectChar = (id) => {\r\n        setSelectedCharId(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <RandomChar/>\r\n            <div className=\"char__content\">\r\n                <CharList onSelectChar={onSelectChar}/>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedCharId}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n"],"names":["className","View","char","name","description","thumbnail","homepage","wiki","comicsList","comics","map","item","i","length","slice","mapComics","imgStyle","includes","src","alt","style","href","charId","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","then","onCharLoaded","skeleton","spinner","Spinner","errorMessage","ErrorMessage","content","onSelectChar","characters","setCharacters","newCharactersLoading","setNewCharactersLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","getCharacters","initial","onCharactersLoaded","newCharacters","ended","itemRefs","useRef","onSelectedChar","id","index","current","forEach","classList","remove","add","focus","items","ref","el","onClick","renderItems","disabled","display","ErrorBoundary","state","errorInfo","this","setState","props","children","Component","objectFit","randomId","Math","floor","random","mjolnir","selectedCharId","setSelectedCharId","decoration"],"sourceRoot":""}